# Task 0
The code written for Task 0 will loop twice, once over the calls file and once over the texts file, each loop
running N times.
Inside of each iteration, only simple instructions are executed (comparisons, function calls and attributions).
Complexity: O(n)

# Task 1
In Task 1 also two loops are executed, each one N times. However, instead of only running simple instructions, for
this task more loops are invoked. For this problem, the worst case scenario would be that all the phone numbers are
unique. With that in mind, the interior of each major loop (texts and calls) consists of two verifications done by
the function number_in_list. If each number is unique, each iteration of the major loop will add one element to the
unique_numbers lists. Then, each call to number_in_list will take one more instruction than the last. So we could think
as the total instructions run by the number_in_list function as an arithmetic progression having common distance 1 and
length X, where X = 2N (each line of the input has two numbers). The sum of this arithmetic progression is given by
(X^2 + x)/2. Thus, 2N^2 + N instructions are executed inside of each major loop (disregarding other simple instructions
and the list append method that has O(1) complexity).
Complexity: O(n^2)

# Task 2
The first loop runs N times, executing gets and sets on a dictionary each iteration. According to Python's
documentation, dict's get and set have a O(n) worst case complexity. Since we are running this for each iteration of the
loop, its complexity will be O(n^2).
Another loop is implemented later in the code to compare which number spent the longest time on the phone. But since
all it does are simple comparisons, its complexity is O(n).
Complexity: O(n^2)

# Task 3
The worst case scenario would be if all the calls were originated from Bangalore and each of them had different area
code destinations. Most instructions inside the loop are simple instructions or call to functions that have O(1)
complexity, except the number_in_list function. Since number_in_list runs X instructions, being X the size of the
called_prefixes list, the total instructions number_in_list will execute is also given by the sum of an arithmetic
progression having a common distance of 1. Hence, the loop will run (N^2 + N)/2 instructions.
Nonetheless, after the loop there is a call to a sort function, which has complexity O(n log(n)), and a loop of
complexity O(n) to print the results. Even so, the most significant part of the complexity is still the N^2 factor.
Complexity: O(n^2)

# Task 4
The worst case scenario is when all the calling numbers are unique, and never receive calls, send or receive texts.
For each iteration over the N inputs, N iterations are made multiple times by number_in_list and number_in_list_element,
making the major loop's complexity O(n^2).
After the loop there is a call to a O(n log(n)) sorting algorithm and a O(n) loop to print the results.
Complexity: O(n^2)
